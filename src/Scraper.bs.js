// Generated by BUCKLESCRIPT VERSION 2.2.3, PLEASE EDIT WITH CARE
'use strict';

var Fs = require("fs");
var Json = require("@glennsl/bs-json/src/Json.bs.js");
var List = require("bs-platform/lib/js/list.js");
var Cheerio = require("cheerio");
var Request = require("request");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Json_encode = require("@glennsl/bs-json/src/Json_encode.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

var Request$1 = /* module */[];

var NodeMore = /* module */[];

var Cheerio$1 = /* module */[];

var url = "http://en.wikipedia.org/wiki/List_of_temples_of_The_Church_of_Jesus_Christ_of_Latter-day_Saints";

var temples = /* array */[];

var templeImages = /* array */[];

var skipTemples = /* :: */[
  "Papeete Tahiti Temple",
  /* :: */[
    "Seoul Korea Temple",
    /* :: */[
      "Cebu City Philippines Temple",
      /* :: */[
        "Kyiv Ukraine Temple",
        /* :: */[
          "Trujillo Peru Temple",
          /* :: */[
            "Cedar City Utah Temple",
            /* [] */0
          ]
        ]
      ]
    ]
  ]
];

function downloadAllImages(templeArray) {
  console.log("Beginning to download temple images.....");
  templeArray.forEach((function (templeInfo) {
          var templeUrl = "https:" + templeInfo.imageUrl;
          Request({
                uri: templeUrl,
                encoding: null
              }, (function (_, _$1, body) {
                  if (body == null) {
                    return /* () */0;
                  } else {
                    console.log("Downloading " + templeInfo.location);
                    Fs.createWriteStream("./temples/" + (templeInfo.location + ".jpg")).write(body, (function () {
                            console.log("Done.");
                            return /* () */0;
                          }));
                    return /* () */0;
                  }
                }));
          return /* () */0;
        }));
  return /* () */0;
}

Request({
      uri: url,
      encoding: "utf8"
    }, (function (_, _$1, maybeBody) {
        if (maybeBody == null) {
          return /* () */0;
        } else {
          console.log("URL:", url);
          var templeNameScrape = Cheerio(".fn", maybeBody);
          templeNameScrape.each((function (_, elem) {
                  var temple = Cheerio(elem, maybeBody);
                  var templeLoc = temple.children().first().text();
                  if (templeLoc.length !== 0) {
                    var data = {
                      location: templeLoc,
                      imageUrl: ""
                    };
                    temples.push(data);
                    return /* () */0;
                  } else {
                    return 0;
                  }
                }));
          var templeImageScrape = Cheerio(".image", maybeBody);
          templeImageScrape.each((function (_, elem) {
                  var temple = Cheerio(elem, maybeBody);
                  var templeSrc = String(temple.children().first().attr("src"));
                  var templeNaturalWidth = String(temple.children().first().attr("data-file-width"));
                  var widthToReplace = templeSrc.substring(templeSrc.lastIndexOf("/") + 1 | 0, templeSrc.lastIndexOf("px"));
                  var newUrl = templeSrc.replace(widthToReplace, templeNaturalWidth);
                  templeImages.push(newUrl);
                  return /* () */0;
                }));
          var updatedTempleImages = templeImages.slice(4);
          var trimmedTempleImages = updatedTempleImages.slice().splice(0, 4);
          var restOfTempleImages = updatedTempleImages.slice().splice(5, updatedTempleImages.length);
          var finalTempleImages = trimmedTempleImages.concat(restOfTempleImages);
          var skipCounter = [0];
          var updatedTemples = temples.reverse().slice(22).reverse();
          updatedTemples.forEach((function (temple, i) {
                  var templeImgOrString;
                  if (finalTempleImages.length > i) {
                    var exit = 0;
                    var _skip;
                    try {
                      _skip = List.find((function (skipTemp) {
                              return +(skipTemp === Caml_array.caml_array_get(updatedTemples, i).location);
                            }), skipTemples);
                      exit = 1;
                    }
                    catch (exn){
                      if (exn === Caml_builtin_exceptions.not_found) {
                        templeImgOrString = Caml_array.caml_array_get(finalTempleImages, i - skipCounter[0] | 0);
                      } else {
                        throw exn;
                      }
                    }
                    if (exit === 1) {
                      skipCounter[0] = skipCounter[0] + 1 | 0;
                      templeImgOrString = "";
                    }
                    
                  } else {
                    templeImgOrString = "";
                  }
                  return Caml_array.caml_array_set(updatedTemples, i, {
                              location: temple.location,
                              imageUrl: templeImgOrString
                            });
                }));
          var encode = function (data) {
            return Json_encode.object_(/* :: */[
                        /* tuple */[
                          "location",
                          data.location
                        ],
                        /* :: */[
                          /* tuple */[
                            "imageUrl",
                            data.imageUrl
                          ],
                          /* [] */0
                        ]
                      ]);
          };
          var json = Json_encode.array(encode, updatedTemples);
          Fs.writeFileSync("temples.json", Json.stringify(json), "utf8");
          return downloadAllImages(updatedTemples);
        }
      }));

exports.Request = Request$1;
exports.NodeMore = NodeMore;
exports.Cheerio = Cheerio$1;
exports.url = url;
exports.temples = temples;
exports.templeImages = templeImages;
exports.skipTemples = skipTemples;
exports.downloadAllImages = downloadAllImages;
/*  Not a pure module */
